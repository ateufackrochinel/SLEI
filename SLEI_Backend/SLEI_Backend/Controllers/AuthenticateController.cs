using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using SLEI_Backend.Dtos;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace SLEI_Backend.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthenticateController : ControllerBase
    {

        private readonly UserManager<IdentityUser> _usermanager = null; // Permet de gerer les utilisateurs
        private readonly RoleManager<IdentityRole> _roleManager = null; // permet de gerer les roles 
        private readonly IConfiguration _config = null;
        public AuthenticateController(UserManager<IdentityUser> userManager, RoleManager<IdentityRole> roleManager, IConfiguration config)
        {
            this._usermanager = userManager;
           this._roleManager = roleManager;
            this._config = config;
        }

        [HttpPost]
        [Route("Register")]
        public async Task<IActionResult> register([FromBody] AuthenticateUserDto dtoUser)
        {
            IActionResult result = this.BadRequest();

            var user = new IdentityUser(dtoUser.login);
            user.Email = dtoUser.login;
            user.UserName = dtoUser.Name;

            var CreateUser = await this._usermanager.CreateAsync(user, dtoUser.Password);


            // Avant d'associer un role a un utilisateur il faut d'abord verifier si l'utilisateur a bien ete cree
            if (CreateUser.Succeeded)
            {
                var CreatedUser = await this._usermanager.FindByEmailAsync(dtoUser.login);

                if (CreatedUser == null)
                {
                    return BadRequest(" L'utilisateur n'existe pas apres la creation");
                }else
                {

                    // Vérifier que le rôle existe
                    if (!await _roleManager.RoleExistsAsync(dtoUser.Role))
                    {
                        return BadRequest($"Le rôle {dtoUser.Role} n'existe pas.");
                    }

                    // Associer l'utilisateur au rôle



                    var roleResult = await _usermanager.AddToRoleAsync(user, dtoUser.Role);

                    if (!roleResult.Succeeded)
                    {
                        return BadRequest("Utilisateur créé, mais erreur lors de l'ajout au rôle.");
                    }

                    if (roleResult.Succeeded)
                    {
                        dtoUser.Token = this.GenerateJwtToken(user);

                        result = this.Ok(dtoUser);
                    }

                }
            }
           

            return result;
        }

        [HttpPost]
        public async Task<IActionResult> login([FromBody] AuthenticateUserDto dtoUser)
        {
            IActionResult result = this.BadRequest();

            var user = await this._usermanager.FindByEmailAsync(dtoUser.login);

            if (user != null)
            {
                var verif = await this._usermanager.CheckPasswordAsync(user, dtoUser.Password);

                if (verif)
                {
                    result = this.Ok(new AuthenticateUserDto
                    {
                        login = dtoUser.login,
                        Name = dtoUser.Name,
                        Token = this.GenerateJwtToken(user)
                    });

                }
            }
            return result;
        }


        private string GenerateJwtToken(IdentityUser user)
        {
            // Now its ime to define the jwt token which will be responsible of creating our tokens
            var jwtTokenHandler = new JwtSecurityTokenHandler();

            // We get our secret from the appsettings
            // var key = Encoding.ASCII.GetBytes(_jwtConfig.Secret);
            // string macle = "toto123jjubgbgbdbgvgrteouuiibgg878485fffffbbhnjjwe344gggggpokjmjnjhnjnhnhnhbhnhnjnjnjmjmjnjnjmnjmjmjmjkkmjnhnhbgccccc";
            var macle = _config["JWT:key"];
            var key = Encoding.UTF8.GetBytes(macle);

            // we define our token descriptor
            // We need to utilise claims which are properties in our token which gives information about the token
            // which belong to the specific user who it belongs to
            // so it could contain their id, name, email the good part is that these information
            // are generated by our server and identity framework which is valid and trusted
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new[]
                {
                new Claim("Id", user.Id),
                new Claim(JwtRegisteredClaimNames.Sub, user.Email),
                new Claim(JwtRegisteredClaimNames.Email, user.Email),
                // the JTI is used for our refresh token which we will be convering in the next video
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
            }),
                // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin
                // but since this is a demo app we can extend it to fit our current need
                Expires = DateTime.UtcNow.AddHours(1),
                // here we are adding the encryption alogorithim information which will be used to decrypt our token
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature)
            };

            var token = jwtTokenHandler.CreateToken(tokenDescriptor);

            var jwtToken = jwtTokenHandler.WriteToken(token);

            return jwtToken;
        }

    }

}